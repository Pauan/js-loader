How to install
==============

::

  git clone https://github.com/Pauan/js-loader
  cd js-loader
  npm install

What is it?
===========

First I'll tell you what it's **not**:

* It's not a new module system. Just use CommonJS or `AMD <http://requirejs.org/>`_ or globals or whatever.

* It's not a replacement for `browserify <https://github.com/substack/node-browserify>`_.

So, what is it, then? It's probably most accurate to call it a `transport format <http://wiki.commonjs.org/wiki/Modules/Transport>`_.

Basically, it's a simple tool that can be used by *other* tools to make the task of "mush multiple CommonJS files into a single file" easier.

It just takes JavaScript code + source maps and returns JavaScript code + a source map. That's it.

Some features:

* Modules are only parsed and evaluated when actually used, so the browser can load the page faster if you ``require`` modules on-demand.

* It can combine CommonJS code and code that uses global variables. AMD would be possible to support, but it would bloat up the loader a lot, so it's left out.

* The runtime loader is *super* small and *super* fast.

* It supports source maps, so if the code has source maps, you'll get back a single big source map for the combined files.

Example
=======

Let's say you had these `CoffeeScript <http://coffeescript.org/>`_ files:

* foo.coffee

  .. code:: coffee-script

    { bar } = require "./bar"
    { qux } = require "./qux"
    exports.foo = (x) ->
      bar(x) + qux(x) + 10

* bar.coffee

  .. code:: coffee-script

    window.bar = (x) ->
      x + 20

If you compile them using ``coffee --compile --map foo.coffee bar.coffee``, you get these files:

* foo.js

  .. code:: javascript

    // Generated by CoffeeScript 1.6.3
    (function() {
      var bar, qux;

      bar = require("./bar").bar;

      qux = require("./qux").qux;

      exports.foo = function(x) {
        return bar(x) + qux(x) + 10;
      };

    }).call(this);

    /*
    //@ sourceMappingURL=foo.map
    */


* bar.js

  .. code:: javascript

    // Generated by CoffeeScript 1.6.3
    (function() {
      window.bar = function(x) {
        return x + 20;
      };

    }).call(this);

    /*
    //@ sourceMappingURL=bar.map
    */


* foo.map

  .. code:: json

    {
      "version": 3,
      "file": "foo.js",
      "sourceRoot": "",
      "sources": [
        "foo.coffee"
      ],
      "names": [],
      "mappings": ";AAAA;CAAA,EAAA,GAAA;;CAAA,CAAE,CAAQ,IAAA;;CAAV,CACA,CAAA,IAAO;CADP"
    }

* bar.map

  .. code:: json

    {
      "version": 3,
      "file": "bar.js",
      "sourceRoot": "",
      "sources": [
        "bar.coffee"
      ],
      "names": [],
      "mappings": ";AAAA;CAAA,CAAA,CAAA,GAAM;CAAN"
    }

In addition, let's say you have an ordinary CommonJS file ``qux.js`` which does not have a source map, since it's just ordinary JavaScript:

.. code:: javascript

  "use strict";
  exports.qux = function (x) {
    return x + 30
  }

You can combine them together like this:

.. code:: javascript

  var loader = require("js-loader")

  var bundle = new loader.Bundle({
    file:   "bundle.js",      // The filename for the bundled code
    map:    "bundle.js.map",  // The filename for the bundled source map
    minify: false,            // Whether to minify the code or not; the default is true
    warn:   true              // Whether to display warnings; the default is false
  })

  // 1st argument is the type, which is either "commonjs" or "global"
  // 2nd argument is the module name
  bundle.add("commonjs", "foo", {
    file: "foo.js",        // The file where the JavaScript code is located; the default is the module name + ".js"
    source: {
      file: "foo.coffee",  // The original filename, corresponds to the "sources" in the source map; defaults to file
      map: {               // A source map; optional, but if used, must have a file and/or code property
        file: "foo.map"    // The file where the source map is located
      }
    }
  })

  bundle.add("global", "bar", {
    source: {
      file: "bar.coffee",
      map: {
        file: "bar.map"
      }
    }
  })

  // Bundle a CommonJS file that doesn't have a source map
  bundle.add("commonjs", "qux")

  // A module that is automatically loaded when the script runs
  bundle.require("foo")

  // Writes the bundle to the file "bundle.js" and the source map to "bundle.js.map"
  // By passing `gzip: true` it will also compress the files with gzip
  bundle.writeFiles({ gzip: true })

And the output is:

* bundle.js

  .. code:: javascript

    // ... contents of require.js go here ...
    define("foo", "// Generated by CoffeeScript 1.6.3\n(function() {\n  var bar, qux;\n\n  bar = require(\"./bar\").bar;\n\n  qux = require(\"./qux\").qux;\n\n  exports.foo = function(x) {\n    return bar(x) + qux(x) + 10;\n  };\n\n}).call(this);\n\n/*\n//@ sourceMappingURL=foo.map\n*/\n\n//# sourceURL=foo.coffee\n//# sourceMappingURL=bundle.js.map")
    global("bar", "// Generated by CoffeeScript 1.6.3\n(function() {\n  window.bar = function(x) {\n    return x + 20;\n  };\n\n}).call(this);\n\n/*\n//@ sourceMappingURL=bar.map\n*/\n\n//# sourceURL=bar.coffee\n//# sourceMappingURL=bundle.js.map")
    define("qux", "\"use strict\";\nexports.qux = function (x) {\n  return x + 30\n}\n//# sourceURL=qux.js")
    require("foo")

* bundle.js.map

  .. code:: json

    )]}
    {"version":3,"file":"bundle.js","sources":["foo.coffee","bar.coffee"],"names":[],"mappings":";ACAA,ADAA;CCAA,ADAA,CCAA,CAAA,GAAM,ADAN,EAAA,CCAc;CACZ,EAAI,QAAJ;CADF,ADAA,CAAE,CCAW,ADAH,IAAA;CCAV;CDAA,CACE,CAAQ,IAAA;;CADV,CAEA,CAAA,IAAO,EAAQ;CACT,EAAJ,QAAA;CAHF,EAEc;CAFd","sourcesContent":["{ bar } = require \"./bar\"\n{ qux } = require \"./qux\"\nexports.foo = (x) ->\n  bar(x) + qux(x) + 10","window.bar = (x) ->\n  x + 20"]}

You can then include ``<script src="bundle.js"></script>`` in your HTML page, which will Just Work(tm), including with source maps.

If you prefer to work with JavaScript code as strings (rather than as files), you can do this instead:

.. code:: javascript

  bundle.add("commonjs", "foo", {
    code: "...",     // Compiled JavaScript code as a string
    source: {
      code: "...",   // Original code as a string
      map: {
        code: "..."  // A source map as a string or JSON object
      }
    }
  })

  var o = bundle.get()
  o.code  // The bundle code as a string
  o.map   // The bundle source map as a string

If you use both a ``code`` and ``file`` property, the ``code`` property is used, and the ``file`` property is used *only* for debugging information.

By working with JavaScript strings rather than files, you can write a compiler that targets JavaScript (e.g. CoffeeScript) and generate a single ``bundle.js`` file, without needing to create temporary files. The ``source.code`` property is especially useful for this, since it can be the original, uncompiled (non-JavaScript) code.

Lastly, if all the input (code and map) files are in the same subdirectory, you can use the ``prefix`` option as a convenience:

.. code:: javascript

  var bundle = new loader.Bundle({ prefix: "src" })

  bundle.add("commonjs", "foo", {
    file: "foo.js",
    source: {
      file: "foo.js",
      map: {
        file: "foo.map"
      }
    }
  })

The above is equivalent to this:

.. code:: javascript

  var bundle = new loader.Bundle({})

  bundle.add("commonjs", "foo", {
    file: "src/foo.js",
    source: {
      file: "src/foo.js",
      map: {
        file: "src/foo.map"
      }
    }
  })